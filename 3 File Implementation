#include<iostream>
#include"Header.h"
#include<cstdlib>
#include<ctime>
#include<string>
#include<fstream>
using namespace std;


GovernmentOfficial G_obj;          //Making a global variable to change/Update members in any memberfunction
FileHandling obj;                  //Global Object


//--------------------------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------------------------
//-------------------------------------------------IMPLEMENTATION-----------------------------------------------------
//--------------------------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------------------------




//--------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------PERSON----------------------------------------------------------
//--------------------------------------------------------------------------------------------------------------------



void Person::Set()
{
	cout << "Enter First Name : ";
	cin >> firstName;
	cout << "Enter last Name : ";
	cin >> lastName;
	cout << "Enter Email id : ";
	cin >> email;
	bool Equal = true;
	while (Equal != false)
	{
		obj.E_mails.close();
		obj.E_mails.open("E-Mails.txt", ios::in);
		int count = 0;
		while (!obj.E_mails.eof())
		{
			string temp;
			getline(obj.E_mails, temp);
			if (email == temp)
			{
				cout << "User Id already exist!\nEnter valid user E-Mail : \n";
				cin >> email;
				break;
			}
			if (obj.E_mails.eof())
			{
				Equal = false;
			}
		}
	}
	obj.E_mails.close();
	obj.E_mails.open("E-Mails.txt", ios::app);
	obj.StoreE_mails(email);
	cout << "Enter Contact Number : ";
	cin >> contactNumber;
	srand(time(NULL));
	ID = rand() % 9000 + 1000;
	cout << "Randomly generated 4 digit ID : " << ID << endl;
	Equal = true;
	while (Equal != false)
	{
		obj.IDs.close();
		obj.IDs.open("IDs.txt", ios::in);
		int count = 0;
		while (!obj.IDs.eof())
		{
			int num;
			obj.IDs >> num;
			if (ID == num)
			{
				cout << "User Id already exist!\nAgain generating a random ID : \n";
				srand(time(NULL));
				ID = rand() % 9000 + 1000;
				break;
			}
			if (obj.IDs.eof())
			{
				Equal = false;
			}
		}
	}
	obj.IDs.close();
	obj.IDs.open("IDs.txt", ios::app);
	obj.StoreIDs(ID);
	cout << "Enter Cnic Number (XXXXX-XXXXXXX-X) : ";
	cin >> CNIC;
	while (CNIC[5] != '-' || CNIC[13] != '-')
	{
		cout << "Invalid format!\nEnter in format (XXXXX-XXXXXXX-X) : ";
		cin >> CNIC;
	}
	Equal = true;
	while (Equal != false)
	{
		obj.CNICs.close();
		obj.CNICs.open("CNICs.txt", ios::in);
		int count = 0;
		while (!obj.CNICs.eof())
		{
			string temp;
			getline(obj.CNICs, temp);
			if (CNIC == temp)
			{
				cout << "User Id already exist!\nEnter valid user CNIC : \n";
				cin >> CNIC;
				break;
			}
			if (obj.CNICs.eof())
			{
				Equal = false;
			}
		}
	}
	obj.CNICs.close();
	obj.CNICs.open("CNICs.txt", ios::app);
	obj.StoreCNICs(CNIC);

}



void Person::SignIn()
{
	
}




//--------------------------------------------------------------------------------------------------------------------
//--------------------------------------------------MD_DOCTOR---------------------------------------------------------
//--------------------------------------------------------------------------------------------------------------------



void MD_Doctor::Set()
{
	Person::Set();
	obj.StoreMD_Doctor(*this);
}



void MD_Doctor::SetData()
{
	cout << "Enter Personal details for MD Doctor : \n";
	Set();
	cout << "Now, checking the citizen : \n";
	cout << "Check the blood Pressure\n";
	cout << "Systolic Pressure: ";
	cin >> systolic_Pressure;
	cout << "Dystolic pressure: ";
	cin >> dystolic_Pressure;
	cout << "Glucose level: ";
	cin >> g_Level;
	cout << "O_Level: ";
	cin >> o_Level;
}



//--------------------------------------------------------------------------------------------------------------------
//-----------------------------------------------------DOCTOR---------------------------------------------------------
//--------------------------------------------------------------------------------------------------------------------



void Doctor::Set()
{
	cout << "Enter information of Doctor : \n";
	Person::Set();
	cout << "Enter number of duty Days : ";
	cin >> Duty_days;
	obj.StoreDoctor(*this);
}



void Doctor::Vaccinate()
{
	string s;
	cout << "Enter CNIC : ";
	cin >> s;
	cout << "Which vaccine you want to inject : \n";
	char x;
	cout << "\t\tFor vaccine type\nPress 1 for WHOLE VIRUS\n2 For PROTEIN SUBUNIT\n3 for VIRAL VECTOR\n4 for NUCLEIC ACID : \n";
	cin >> x;
	while (x != '1' && x != '2' && x != '3' && x != '4')
	{
		cout << "Wrong input !,Input again : ";
		cin >> x;
	}
	cout << "You are vaccinated : ";
	cout << "Enter 1 if you are partially vaccinated\n2 if you are fully vaccinated : \n3 if you are vaccinated with booster dose \n";
	cin >> x;
	G_obj.PercentageTotalvaccinated++;
	if (x == '1')
	{
		G_obj.PerPartiallyVaccinated++;
		obj.VaccineAdd(s);
	}
	else if (x == '2')
	{
		G_obj.PerFullyVaccinated++;
	}
	else if (x == '3')
	{
		G_obj.PerBoosterVaccinated++;
	}
}



void Doctor::SignIn()
{
	string CNIC, temp, C;
	cout << "Enter Cnic Number (XXXXX-XXXXXXX-X) : ";
	cin >> C;
	while (C[5] != '-' || C[13] != '-')
	{
		cout << "Invalid format!\nEnter in format (XXXXX-XXXXXXX-X) : ";
		cin >> C;
	}
	bool Equal = false;
	while (Equal != true)
	{
		obj.doctor.close();
		obj.doctor.open("Doctor.txt", ios::in);
		while (!obj.doctor.eof())
		{
			getline(obj.doctor, temp);
			CNIC = "CNIC : " + C;
			if (CNIC == temp)
			{
				Equal = true;
				break;
			}
			for (int i = 0; i < 6; ++i)
			{
				getline(obj.doctor, temp);
			}
		}
		if (CNIC != temp)
		{
			Equal = false;
			cout << "Invalid CNIC!Enter Again : \n";
			cin >> C;
		}
	}
}



//--------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------FDO-----------------------------------------------------------
//--------------------------------------------------------------------------------------------------------------------



void FDO::Set()
{
	cout << "Enter information of FDO : ";
	Person::Set();
	obj.StoreFDO(*this);
}



void FDO::Setter()
{
	int num, CounterNum = 1;
	cout << "Enter the number of counters : ";
	cin >> num;
	Counters = new int[num];
	cout << "Enter number of poeple on all counters : ";
	for (int i = 0; i < num; ++i)
	{
		cout << "For counter " << i + 1 << " : \n";
		cin >> Counters[i];
		while (Counters[i] < 0)
		{
			cout << "Invalid number : \nEnter again : ";
			cin >> Counters[i];
		}
	}
	int smallest = Counters[0];
	for (int i = 1; i < num; i++)
	{
		if (Counters[i] < smallest)
		{
			smallest = Counters[i];
			CounterNum = i + 1;
		}
	}
	cout << "Patient please go to the counter number : " << CounterNum << " ,because it has least number of people i.e : " << smallest << " \n";
	char x;
	cout << "Enter 1 for again going to CRUD menu : ";
	cin >> x;
	if (x == 1)
	{
		SuperAdmin S_A;
		S_A.CRUD_Menu();
	}
}



bool FDO::check_Eligibility()
{
	int check_Eligibility = 0;
	MD_Doctor::SetData();
	cout << "Now check the eligibility for the patient that he or she will be able for vaccine or not\n";
	if (MD_Doctor::systolic_Pressure < 120 && MD_Doctor::dystolic_Pressure < 80)
	{
		cout << "Normal blood pressure\n";
	}
	else
	{
		cout << "Not normal blood pressure\n";
		check_Eligibility = check_Eligibility + 1;
	}
	if (MD_Doctor::g_Level < 140)
	{
		cout << "Normal glucose level\n";
	}
	else
	{
		cout << "Not nornmal glucose level\n";
		check_Eligibility = check_Eligibility + 1;
	}
	if (MD_Doctor::o_Level > 75 && MD_Doctor::o_Level < 100)
	{
		cout << "Normal oxygen level\n";
	}
	else
	{
		cout << "Not normal oxygen level\n";
		check_Eligibility = check_Eligibility + 1;
	}
	if (check_Eligibility > 0)
	{
		cout << "You are not able for vaccine\n";
		return false;
	}
	else
	{
		cout << "You are able for vaccine\n";
		return true;
	}
}



void FDO::SignIn()
{
	string CNIC, temp, C;
	cout << "Enter Cnic Number (XXXXX-XXXXXXX-X) : ";
	cin >> C;
	while (C[5] != '-' || C[13] != '-')
	{
		cout << "Invalid format!\nEnter in format (XXXXX-XXXXXXX-X) : ";
		cin >> C;
	}
	bool Equal = false;
	while (Equal != true)
	{
		obj.fDOs.close();
		obj.fDOs.open("FDO.txt", ios::in);
		while (!obj.fDOs.eof())
		{
			getline(obj.fDOs, temp);
			CNIC = "CNIC : " + C;
			if (CNIC == temp)
			{
				Equal = true;
				break;
			}
			for (int i = 0; i < 5; ++i)
			{
				getline(obj.fDOs, temp);
			}
		}
		if (CNIC != temp)
		{
			Equal = false;
			cout << "Invalid CNIC!Enter Again : \n";
			cin >> C;
		}
	}
}



//--------------------------------------------------------------------------------------------------------------------
//-----------------------------------------------------ADMIN----------------------------------------------------------
//--------------------------------------------------------------------------------------------------------------------



void Admin::Set()
{
	Person::Set();
	obj.StoreAdmin(*this);
	char x;
}


void Admin::Vac()
{
	int x;
	int num;
	cout << "Enter 1 to add vaccines : ";
	cin >> num;
	if (num == 1)
	{
		cout << "How many types of vaccine you want to add?";
		cin >> x;
		vac_stat = new char[x];
		vaccines = new Vaccines[x];
		suppliers = new Supplier[x];
		cout << "Enter vaccine information : ";
		for (int i = 0; i < x; i++)
		{
			cout << "For vaccine " << i + 1 << " : \n";
			cout << "First enter the data of supplier : \n";
			suppliers[i].Set();
			cout << "Enter information of vaccine : \n";
			vaccines[i].setVacData();
			cout << "Enter 1 for local vaccine\nEnter 2 for international vaccine\n";
			cin >> vac_stat[i];
		}
		//---
		Warehouses war;
		system("cls");
		cout << "PUTTING VACCINES IN WAREHOUSE \n";
		war.WareSet(x);
		system("cls");
		cout << "Establishing vaccination center \n";
		VaccinationCentres vc;
		vc.setBatchData();
	}
	else
	{
		cout << "Invalid";
	}
}



void Admin::SignIn()
{
 	string CNIC, temp, C;
	cout << "Enter Cnic Number (XXXXX-XXXXXXX-X) : ";
	cin >> C;
	while (C[5] != '-' || C[13] != '-')
	{
		cout << "Invalid format!\nEnter in format (XXXXX-XXXXXXX-X) : ";
		cin >> C;
	}
	bool Equal = false;
	while (Equal != true)
	{
		obj.admin.close();
		obj.admin.open("Admins.txt", ios::in);
		while (!obj.admin.eof())
		{
			getline(obj.admin, temp);
			CNIC = "CNIC : " + C;
			if (CNIC == temp)
			{
				Equal = true;
				break;
			}
			for (int i = 0; i < 5; ++i)
			{
				getline(obj.admin, temp);
			}
		}
		if (CNIC != temp)
		{
			Equal = false;
			cout << "Invalid CNIC!Enter Again : \n";
			cin >> C;
		}
	}
}




//--------------------------------------------------------------------------------------------------------------------
//---------------------------------------------------MANUFACTURER-----------------------------------------------------
//--------------------------------------------------------------------------------------------------------------------



void Manufacturer::Set()
{
	Person::Set();
 	obj.StoreManufacturer(*this);
}



//--------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------SUPPLIER--------------------------------------------------------
//--------------------------------------------------------------------------------------------------------------------



void Supplier::Set()
{
	Person::Set();
 	obj.StoreSupplier(*this);
}



//--------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------VENDOR--------------------------------------------------------
//--------------------------------------------------------------------------------------------------------------------



void Vendor::Set()
{
	Person::Set();
 	obj.StoreVendor(*this);
}



//--------------------------------------------------------------------------------------------------------------------
//-----------------------------------------------GOVERNMENT_OFFICIAL--------------------------------------------------
//--------------------------------------------------------------------------------------------------------------------



void GovernmentOfficial::CalculateData()
{
	string temp;
	obj.StoreGovernmentOfficial();
	obj.govtOfficial.close();
	obj.govtOfficial.open("Government Officials.txt", ios::in);
	cout << "\t\tDisplaying the data : \n";
	while (!obj.govtOfficial.eof())
	{
		getline(obj.govtOfficial, temp);
		cout << temp << endl;
	}
}



void GovernmentOfficial::DisplayGraph()
{
	cout << "\n\n\t\t\t\t\tDisplaying graph : \n\n";
	float PV, FV, BV;
	PV = (G_obj.PerPartiallyVaccinated / G_obj.PercentageTotalvaccinated) * 100;
	FV = (G_obj.PerFullyVaccinated / G_obj.PercentageTotalvaccinated) * 100;
	BV = (G_obj.PerBoosterVaccinated / G_obj.PercentageTotalvaccinated) * 100;
	cout << "||||-----------------------------------------------------------------------------------------------------||||\n";
	cout << "||||--------------------------------Total Vaccinated People : " << G_obj.PercentageTotalvaccinated << "----------------------------------||||\n";
	cout << "||||-----------------------------------------------------------------------------------------------------||||\n";
	cout << "||||   Categories  ||||   Partially Vaccinated   ||||   Fully Vacinated   |||||   Booster Vaccinated   ||||\n";
	cout << "||||-----------------------------------------------------------------------------------------------------||||\n";
	cout << "||||    Number      ||           " << G_obj.PerPartiallyVaccinated << "           ||           " << G_obj.PerFullyVaccinated << "          ||          " << G_obj.PerBoosterVaccinated << "         ||||\n";
	cout << "||||-----------------------------------------------------------------------------------------------------||||\n";
	cout << "||||   Percentage   ||           " << PV << "           ||           " << FV << "          ||          " << BV << "         ||||\n";
	cout << "||||-----------------------------------------------------------------------------------------------------||||\n";
}



void GovernmentOfficial::Set()
{
	Person::Set();
 	obj.StoreGovtPdata(*this);
}



void GovernmentOfficial::SetAllData(FileHandling& obj)
{
	obj.govtData >> PercentageTotalvaccinated;
	obj.govtData >> PerPartiallyVaccinated;
	obj.govtData >> PerFullyVaccinated;
	obj.govtData >> PerBoosterVaccinated;
	obj.govtData >> AmountSpentTotal;
	for (int i = 0; i < 6; ++i)
	{
		obj.govtData >> vacUsed_perType[i];
	}
	G_obj.PercentageTotalvaccinated = PercentageTotalvaccinated;
	G_obj.PerPartiallyVaccinated = PerPartiallyVaccinated;
	G_obj.PerFullyVaccinated = PerFullyVaccinated;
	G_obj.PerBoosterVaccinated = PerBoosterVaccinated;
	G_obj.AmountSpentTotal = AmountSpentTotal;
	for (int i = 0; i < 6; ++i)
	{
		G_obj.vacUsed_perType[i] = vacUsed_perType[i];
	}
}




void GovernmentOfficial::SignIn()
{
 	string CNIC, temp, C;
	cout << "Enter Cnic Number (XXXXX-XXXXXXX-X) : ";
	cin >> C;
	while (C[5] != '-' || C[13] != '-')
	{
		cout << "Invalid format!\nEnter in format (XXXXX-XXXXXXX-X) : ";
		cin >> C;
	}
	bool Equal = false;
	while (Equal != true)
	{
		obj.govtPdata.close();
		obj.govtPdata.open("Govt Officials Person data.txt", ios::in);
		while (!obj.govtPdata.eof())
		{
			getline(obj.govtPdata, temp);
			CNIC = "CNIC : " + C;
			if (CNIC == temp)
			{
				Equal = true;
				break;
			}
			for (int i = 0; i < 5; ++i)
			{
				getline(obj.govtPdata, temp);
			}
		}
		if (CNIC != temp)
		{
			Equal = false;
			cout << "Invalid CNIC!Enter Again : \n";
			cin >> C;
		}
	}
}



//--------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------VACCINES--------------------------------------------------------
//--------------------------------------------------------------------------------------------------------------------



void Vaccines::setVacData()
{
	char x;
	cout << "\t\tFor vaccine type\nPress 1 for WHOLE VIRUS\n2 For PROTEIN SUBUNIT\n3 for VIRAL VECTOR\n4 for NUCLEIC ACID : \n";
	cin >> x;
	while (x != '1' && x != '2' && x != '3' && x != '4')
	{
		cout << "Wrong input !,Input again : ";
		cin >> x;
	}
	if (x == '1')
	{
		vacType = "WHOLE VIRUS";
	}
	else if (x == '2')
	{
		vacType = "PROTEIN SUBUNIT";
	}
	else if (x == '3')
	{
		vacType = "VIRAL VECTOR";
	}
	else if (x == '4')
	{
		vacType = "NUCLEIC ACID";
	}
	cout << "\t\tFor vaccine Name\nPress 1 for Pfizer\n2 For Moderna\n3 for PakVac\n4 for Sinopharm\n5 for CanSio Bio\n6 for Astrazeneca : \n(NOTE : All vacines have two doses)\n;";
	cin >> x;
	while (x != '1' && x != '2' && x != '3' && x != '4' && x != '5' && x != '6')
	{
		cout << "Wrong input !,Input again : ";
		cin >> x;
	}
	if (x == '1')
	{
		vacName = "Pfizer-BioNTech";
		NumberOfDoses = 2;
	}
	else if (x == '2')
	{
		vacName = "Moderna";
		NumberOfDoses = 2;
	}
	else if (x == '3')
	{
		vacName = "PakVac";
		NumberOfDoses = 1;
	}
	else if (x == '4')
	{
		vacName = "Sinopharm";
		NumberOfDoses = 2;
	}
	else if (x == '5')
	{
		vacName = "CanSio Bio";
		NumberOfDoses = 1;
	}
	else if (x == '6')
	{
		vacName = "Astrazeneca";
		NumberOfDoses = 2;
	}
	srand(time(NULL));
	vacID = rand() % 9000 + 1000;
	cout << "A four digit vacID is randomly generated\n";
	cout << "Enter its price : ";
	cin >> price;
	srand(time(NULL));
	BatchID = rand() % 9000 + 1000;
	cout << "A four digit BatchID is randomly generated\n";
 	obj.StoreVaccineData(*this);
}



//--------------------------------------------------------------------------------------------------------------------
//----------------------------------------------VACCINATION_CENTRES---------------------------------------------------
//--------------------------------------------------------------------------------------------------------------------



void VaccinationCentres::setBatchData()
{
	srand(time(NULL));
	BatchID = rand() % 9000 + 1000;
	cout << "Random 4-Digit ID of vaccine batch is generated : ";
	cout << "Enter Supplier ID : (4-Digit ID)";
	cin >> SupplierID;
	cout << "Enter the Expiry date : \n";
	cout << "Day : ";
	cin >> day;
	cout << "Month : ";
	cin >> month;
	cout << "Year : ";
	cin >> year;
	cout << "Enter the company name : ";
	cin >> Company;
	cout << "Enter city name : ";
	cin >> City;
	cout << "Enter Population of the city : ";
	cin >> population;
	while (population <= 0)
	{
		cout << "Invalid information\nInput Again : ";
		cin >> population;
	}
	int temp = population;
	while (temp > 20000)
	{
		temp -= 20000;
		numberOfcenters++;
	}
	numberOfcenters++;
	cout << "Number of centres is automatically calculated on the base of population within the city\n";
}



//--------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------WAREHOUSES------------------------------------------------------
//--------------------------------------------------------------------------------------------------------------------



void Warehouses::WareSet(int N)
{
	int count;
	cout << "Enter name of Warehouse : ";
	cin >> name;
	cout << "Enter location : \t";
	cout << "lattitude : ";
	cin >> latti;
	cout << "Enter direction : (N,S)";
	cin >> Lat;
	while (Lat != 'N' && Lat != 'S')
	{
		cout << "Invalid Input!\nEnter Again : ";
		cin >> Lat;
	}
	cout << "longitude : ";
	cin >> longi;
	cout << "Enter direction : (E,W)";
	cin >> Lon;
	while (Lon != 'E' && Lon != 'W')
	{
		cout << "Invalid Input!\nEnter Again : ";
		cin >> Lon;
	}
	cout << "Enter capacity of warehouse : ";
	cin >> capacity;
	cout << "How many Vaccines are supplied : \n";
	cin >> num;
	VacType = new Vaccines[num];
	Vac = new int[num];
	cout << "Entering info of all " << num << " vaccines : \n";
	for (int i = 0; i < N; ++i)
	{
		count = i;
		cout << "For Vaccine " << i + 1 << " : \n";
		cout << "Enter Number of Vaccines of this type : ";
		cin >> Vac[i];
		Total += Vac[i];
		if (Total > capacity)
		{
			cout << "Exceeded the Entered Capacity of WareHouse : \n";
			cout << "The remaining types(if any are set to zero)\n";
			int Temp = Total - capacity;
			Total = Total - Vac[i];
			Vac[i] = Vac[i] - Temp;
			Total = Total + Vac[i];
			if (i != num - 1)
			{
				for (int i = count; i < num; ++i)
				{
					Vac[i] = 0;
				}
			}
			break;
		}
	}
	cout << "Total of " << Total << " vaccines are Supplied To WareHouse\n";
 	obj.StoreWarehouses(*this);
}



//--------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------CITIZEN---------------------------------------------------------
//--------------------------------------------------------------------------------------------------------------------



void Citizen::Set()
{
 	cout << "\t\t\tSIGNUP\n";
 	Person::Set();
	cout << "Enter your age : ";
	cin >> age;
	while (!cin >> age)
	{
		cout << "Wrong Input, Please Input again : \n";
		cin.clear();
		cin.ignore(numeric_limits < streamsize > ::max(), '\n');
		cin >> age;
	}
	cout << "Enter Password of Email adress : ";
	cin >> pass;
	cout << "Enter Blood type : ";
	cin >> bloodType;
	cout << "Enter City : ";
	cin >> city;
	cout << "Enter State : ";
	cin >> state;
	cout << "Enter Address : ";
	cin >> address;
	cout << "Enter Date of Birth : ";
	cin >> dob;
	cout << "If you are not allergic to to any of vaccine components, press 1 else press 0";
	cin >> allergy;
	if (allergy == 1)
	{
		eligibilityCheck = true;
		if (age >= 5)
		{
			eligibilityCheck = true;
		}
		else
		{
			eligibilityCheck = false;
		}
	}
	else
	{
		eligibilityCheck = false;
	}
	obj.StoreCitizenlogin(*this);
	obj.StoreCitizen(*this);
	cout << "\t\tCONGRATS! You have successfully signed up";
	if (eligibilityCheck == false)
	{
		cout << "\nBut you are not eligible for vaccination";
	}
	system("pause");
}


void Citizen::SignIn()
{
	string CNIC, temp, C, Email, pas, P;
	cout << "Enter Cnic Number (XXXXX-XXXXXXX-X) : ";
	cin >> C;
	while (C[5] != '-' || C[13] != '-')
	{
		cout << "Invalid format!\nEnter in format (XXXXX-XXXXXXX-X) : ";
		cin >> C;
	}
	bool Equal = false;
	while (Equal != true)
	{
		obj.citizen.close();
		obj.citizen.open("Citizens.txt", ios::in); 
		while (!obj.citizen.eof())
		{
			getline(obj.citizen, temp);
			CNIC = "CNIC : " + C;
			if (CNIC == temp)
			{
				Equal = true;
				break;
			}
			for (int i = 0; i < 11; ++i)
			{
				getline(obj.citizen, temp);
			}
		}
		if (CNIC != temp)
		{
			Equal = false;
			cout << "Invalid CNIC!Enter Again : \n";
			cin >> C;
		}
	}
	cout << "Enter email : ";
	cin >> Email;
	Equal = false;
	while (Equal != true)
	{
		obj.Email_Pass.close();
		obj.Email_Pass.open("C Email_Pass.txt", ios::in);
		while (!obj.Email_Pass.eof())
		{
			getline(obj.Email_Pass, temp);
			if (Email == temp)
			{
				Equal = true;
				cout << "User Found!\n";
				getline(obj.Email_Pass, pas);
				break;
			}
		}
		if (CNIC != temp)
		{
			Equal = false;
			cout << "Email not found!Enter Again : \n";
			cin >> C;
		}
	}
	cout << "Enter password : ";
	cin >> P;
	while (P != pas)
	{
		cout << "Incorrect Password!Enter Again : ";
		cin >> P;
	}
}



//--------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------SUPER_ADMIN-----------------------------------------------------
//--------------------------------------------------------------------------------------------------------------------



void SuperAdmin::Set()
{
	Person::Set();
 	obj.StoreSuperAdmin(*this);
}



void SuperAdmin::SignIn()
{
 	string CNIC, temp, C; 
	cout << "Enter Cnic Number (XXXXX-XXXXXXX-X) : ";
	cin >> C;
	while (C[5] != '-' || C[13] != '-')
	{
		cout << "Invalid format!\nEnter in format (XXXXX-XXXXXXX-X) : ";
		cin >> C;
	}
	bool Equal = false;
	while (Equal != true)
	{
		obj.s_Admin.close();
		obj.s_Admin.open("Super Admin.txt", ios::in);
		getline(obj.s_Admin, temp);
		CNIC = "CNIC : " + C;
		if (CNIC != temp)
		{
			Equal = false;
			cout << "Invalid CNIC!Enter Again : \n";
			cin >> C;
		}
		else
		{
			Equal = true;
		}
	}
}



void SuperAdmin::CRUD_Menu()
{
	char choice;
	cout << "\t\tCRUD MENU\nPress 1 to create : \nPress 2 to retrieve : \nPress 3 to update : \nPress 4 to Delete : \nPress 5 to EXIT from CRUD MENU: \n";
	cin >> choice;
	while (choice != '5' && choice != '4' && choice != '3' && choice != '2' && choice != '1')
	{
		cout << "Invalid Input!\nEnter again : ";
		//cin.clear();
		//cin.ignore(numeric_limits < streamsize > ::max(), '\n');
		cin >> choice;
	}
	if (choice == '1')
	{
		//system("cls");
		cout << "Press 1 to add Admin : \nPress 2 to add Doctor : \nPress 3 to add Front Desk Officer : \nPress 4 to add Citizen : \nPress 5 to add Vaccination Center : \nPress 6 to add WareHouse : \nPress 7 to add Goverment official\nPress 8 to EXIT\n";
		cin >> choice;
		while (choice != '8' && choice != '7' && choice != '6' && choice != '5' && choice != '4' && choice != '3' && choice != '2' && choice != '1')
		{
			cout << "Invalid Input!\nEnter again : ";
			//cin.clear();
			//cin.ignore(numeric_limits < streamsize > ::max(), '\n');
			cin >> choice;
		}
		if (choice == '1') // Admin
		{
			Admin obj;
			obj.Set();
			char x;
			cout << "Enter 1 for again going to CRUD menu : ";
			cin >> x;
			if (x == '1')
			{
				SuperAdmin S_A;
				S_A.CRUD_Menu();
			}
		}
		else if (choice == '2') // Doctor
		{
			Doctor obj;
			obj.Set();
			char x;
			cout << "Enter 1 for again going to CRUD menu : ";
			cin >> x;
			if (x == '1')
			{
				SuperAdmin S_A;
				S_A.CRUD_Menu();
			}
		}
		else if (choice == '3') // FDO
		{
			FDO obj;
			obj.Set();
			char x;
			cout << "Enter 1 for again going to CRUD menu : ";
			cin >> x;
			if (x == '1')
			{
				SuperAdmin S_A;
				S_A.CRUD_Menu();
			}
		}
		else if (choice == '4') // Citizen
		{
			Citizen obj;
			obj.Set();
			char x;
			cout << "Enter 1 for again going to CRUD menu : ";
			cin >> x;
			if (x == '1')
			{
				SuperAdmin S_A;
				S_A.CRUD_Menu();
			}
		}
		else if (choice == '5') // Vacinationn Center
		{
			VaccinationCentres obj;
			// banana hy abhi



			char x;
			cout << "Enter 1 for again going to CRUD menu : ";
			cin >> x;
			if (x == '1')
			{
				SuperAdmin S_A;
				S_A.CRUD_Menu();
			}
		}
		else if (choice == '6') // WareHouse
		{
			Warehouses obj;
			obj.WareSet(5);



			char x;
			cout << "Enter 1 for again going to CRUD menu : ";
			cin >> x;
			if (x == '1')
			{
				SuperAdmin S_A;
				S_A.CRUD_Menu();
			}
		}
		else if (choice == '7') // GOVT Official
		{
			GovernmentOfficial obj;
			obj.Set();
			char x;
			cout << "Enter 1 for again going to CRUD menu : ";
			cin >> x;
			if (x == '1')
			{
				SuperAdmin S_A;
				S_A.CRUD_Menu();
			}
		}
		else if (choice == '8') // Exit
		{
			exit(0);
		}
	}
	if (choice == '2')
	{
		//system("cls");
		cout << "Press 1 to retrieve Admin : \nPress 2 to retrieve Doctor : \nPress 3 to retrieve Front Desk Officer : \nPress 4 to retrieve Citizen : \nPress 5 to retrieve Vaccination Center : \nPress 6 to retrieve WareHouse : \nPress 7 to retrieve Goverment official\nPress 8 to EXIT\n";
		cin >> choice;
		while (choice != '8' && choice != '7' && choice != '6' && choice != '5' && choice != '4' && choice != '3' && choice != '2' && choice != '1')
		{
			cout << "Invalid Input!\nEnter again : ";
			//cin.clear();
			//cin.ignore(numeric_limits < streamsize > ::max(), '\n');
			cin >> choice;
		}
		if (choice == '1') // Admin
		{
			string CNIC, temp, C;
			cout << "Enter CNIC : ";
			cin >> C;
			bool Equal = false;
			while (Equal != true)
			{
				obj.admin.close();
				obj.admin.open("Admins.txt", ios::in);
				while (!obj.admin.eof())
				{
					getline(obj.admin, temp);
					CNIC = "CNIC : " + C;
					if (CNIC == temp)
					{
						Equal = true;
						cout << CNIC << endl;
						for (int i = 0; i < 5; ++i)
						{
							getline(obj.doctor, temp);
							cout << temp << endl;
						}
						break;
					}
					
				}
				if (Equal == true)
				{
					
				}
				else
				{
					Equal = false;
					cout << "Invalid CNIC!Enter Again : \n";
					cin >> C;
				}
			}
		}
		else if (choice == '2') // Doctor
		{
			
		}
		else if (choice == '3') // FDO
		{
			
		}
		else if (choice == '4') // Citizen
		{
			
		}
		else if (choice == '5') // Vacinationn Center
		{
			//VaccinationCentres obj;
			//// banana hy abhi



			//char x;
			//cout << "Enter 1 for again going to CRUD menu : ";
			//cin >> x;
			//if (x == '1')
			//{
			//	SuperAdmin S_A;
			//	S_A.CRUD_Menu();
			//}
		}
		else if (choice == '6') // WareHouse
		{
			/*Warehouses obj;
			obj.WareSet(5);


			char x;
			cout << "Enter 1 for again going to CRUD menu : ";
			cin >> x;
			if (x == '1')
			{
				SuperAdmin S_A;
				S_A.CRUD_Menu();
			}*/
		}
		else if (choice == '7') // GOVT Official
		{
			
		}
		else if (choice == '8') // Exit
		{
			exit(0);
		}
	}
	//case 3: // Update
	//{
	//	break;
	//}
	//case 4: // Delete
	//{
	//	break;
	//}
	//}
}




//--------------------------------------------------------------------------------------------------------------------
//---------------------------------------------------FILE_HANDLING----------------------------------------------------
//--------------------------------------------------------------------------------------------------------------------



void FileHandling::Open()
{
	CNICs.open("CNICs.txt", ios::app);
	Email_Pass.open("C Email_Pass.txt", ios::app);
	IDs.open("IDs.txt", ios::app);
	E_mails.open("E-Mails.txt", ios::app);
	admin.open("Admins.txt", ios::app);
	s_Admin.open("Super Admin.txt", ios::app);
	manuFacturer.open("Manufacturers.txt", ios::app);
	supplier.open("Suppliers.txt", ios::app);
	vendor.open("Vendors.txt", ios::app);
	doctor.open("Doctor.txt", ios::app);
	md_doctor.open("MD Doctors.txt", ios::app);
	fDOs.open("FDO.txt", ios::app);
	citizen.open("Citizens.txt", ios::app);
	vaccinesTypes.open("Vaccines Types.txt", ios::app);
	vaccinationCenteres.open("Vaccination Centres.txt", ios::app);
	govtOfficial.open("Government Officials.txt", ios::out);
	govtData.open("Govt Record.txt", ios::in);
	govtPdata.open("Govt Officials Person data.txt", ios::app);
	w_houses.open("WareHouses.txt", ios::app);
	vacData.open("VAccines Data.txt", ios::app);
}



void FileHandling::VaccineAdd(string a)
{

	citizen.close();
	citizen.open("citizen.txt", ios::in);
	citizen_update.open("updateCitizen.txt", ios::out);
	while (!citizen.eof())
	{
		string s;
		citizen >> s;
		citizen_update << s;
		if (a == s)
		{
			citizen_update << "Vaccinated \n";
		}
		citizen_update << s;
		//getline(citizen,a);
	}
}



void FileHandling::StoreCNICs(string s)
{
	CNICs << s << endl;
	cout << endl;
}



void FileHandling::StoreIDs(int x)
{
	IDs << x << endl;
	cout << endl;
}


void FileHandling::StoreE_mails(string s)
{
	E_mails << s << endl;
	cout << endl;
}



void FileHandling::StoreAdmin(Admin& obj)
{
	admin << "CNIC : " << obj.CNIC <<"\nFirst Name : " << obj.firstName << "\nlast Name : " << obj.lastName << "\nEmail id : " << obj.email << "\nContact Number : " << obj.contactNumber << "\nID : " << obj.ID << endl;
}



void FileHandling::StoreSuperAdmin(SuperAdmin& obj)
{
	s_Admin.close();
	s_Admin.open("Super Admin.txt", ios::out);
	s_Admin << "CNIC : " << obj.CNIC << "\nFirst Name : " << obj.firstName << "\nlast Name : " << obj.lastName << "\nEmail id : " << obj.email << "\nContact Number : " << obj.contactNumber << "\nID : " << obj.ID << endl;
}



void FileHandling::StoreManufacturer(Manufacturer& obj)
{
	manuFacturer << "CNIC : " << obj.CNIC << "\nFirst Name : " << obj.firstName << "\nlast Name : " << obj.lastName << "\nEmail id : " << obj.email << "\nContact Number : " << obj.contactNumber << "\nID : " << obj.ID << endl;
}



void FileHandling::StoreVendor(Vendor& obj)
{
	vendor << "CNIC : " << obj.CNIC << "\nFirst Name : " << obj.firstName << "\nlast Name : " << obj.lastName << "\nEmail id : " << obj.email << "\nContact Number : " << obj.contactNumber << "\nID : " << obj.ID << endl;
}



void FileHandling::StoreGovtPdata(GovernmentOfficial& obj)
{
	govtPdata << "CNIC : " << obj.Person::CNIC << "\nFirst Name : " << obj.Person::firstName << "\nlast Name : " << obj.Person::lastName << "\nEmail id : " << obj.Person::email << "\nContact Number : " << obj.Person::contactNumber << "\nID : " << obj.Person::ID << endl;
}



void FileHandling::StoreSupplier(Supplier& obj)
{
	supplier << "CNIC : " << obj.CNIC << "\nFirst Name : " << obj.firstName << "\nlast Name : " << obj.lastName << "\nEmail id : " << obj.email << "\nContact Number : " << obj.contactNumber << "\nID : " << obj.ID << endl;
}



void FileHandling::StoreDoctor(Doctor& obj)
{
	doctor << "CNIC : " << obj.CNIC << "\nFirst Name : " << obj.firstName << "\nlast Name : " << obj.lastName << "\nEmail id : " << obj.email << "\nContact Number : " << obj.contactNumber << "\nID : " << obj.ID << "\nDuty Days : " << obj.Duty_days << endl;
}



void FileHandling::StoreFDO(FDO& obj)
{
	fDOs << "CNIC : " << obj.Person::CNIC << "\nFirst Name : " << obj.Person::firstName << "\nlast Name : " << obj.Person::lastName << "\nEmail id : " << obj.Person::email << "\nContact Number : " << obj.Person::contactNumber << "\nID : " << obj.Person::ID << endl;
}



void FileHandling::StoreMD_Doctor(MD_Doctor& obj)
{
	md_doctor << "CNIC : " << obj.Person::CNIC << "\nFirst Name : " << obj.Person::firstName << "\nlast Name : " << obj.Person::lastName << "\nEmail id : " << obj.Person::email << "\nContact Number : " << obj.Person::contactNumber << "\nID : " << obj.Person::ID << endl;
}



void FileHandling::StoreCitizen(Citizen& obj)
{
	// encrypting password
	for (int i = 0; obj.pass[i] != '\0'; i++)
	{
		obj.pass[i] = obj.pass[i] + 3; //the key for encryption is 3 that is added to ASCII value
	}
	citizen << "CNIC : " << obj.CNIC << "\nName : " << obj.firstName << " " << obj.lastName << "\nAge : " << obj.age << "\nEmail id : " << obj.email << "\nPassword : " << obj.pass << "\nContact Number : " << obj.contactNumber << "\nBlood Type : " << obj.bloodType << "\nCity : " << obj.city << "\nState : " << obj.state << "\nAddress : " << obj.address << "\nDate of birth : " << obj.dob << "\nEligibility check : " << obj.eligibilityCheck << endl;
	/*citizen << "\nRecord of Stats : \n";
	citizen << "Blood Pressure : " << obj.systolic_Pressure << " / " << obj.dystolic_Pressure << "\nOxygen Level : " << obj.o_Level << "\nGlucose Level : " << obj.g_Level << endl;
	*/
	
	////this is how to decrypt it
	//for (int i = 0; obj.pass[i] != '\0'; i++)
	//{
	//	obj.pass[i] = obj.pass[i] - 3; //the key for encryption is 3 that is subtracted to ASCII value
	//}
}



void FileHandling::StoreCitizenlogin(Citizen &obj)
{
	Email_Pass << obj.email << endl;
	Email_Pass << obj.pass << endl;
}



void FileHandling::StoreVaccineData(Vaccines& obj)
{
	vaccinesTypes << "Vac Type : " << obj.vacType << "\nVac Name : " << obj.vacName << "\nVac id : " << obj.vacID << "\nNumber of Doses : " << obj.NumberOfDoses << "\nPrice : " << obj.price << "\nBatch ID : " << obj.BatchID << "\nVacBatchID : " << obj.BatchVacID << endl;
}



void FileHandling::StoreVaccinationCentres(VaccinationCentres& obj)
{
	vaccinationCenteres << "City : " << obj.City << "\nCompany : " << obj.Company << "\nPopulation of city : " << obj.population << "\nNumber of centeres : " << obj.numberOfcenters << "\nBatch ID : " << obj.VaccineID << "\nExpiry Date of Batch : " << obj.day << " - " << obj.month << "-" << obj.year << endl;
}



void FileHandling::StoreWarehouses(Warehouses& obj)
{
	w_houses << "Name of WareHouse : " << obj.name << "\nLocation : " << obj.latti << " degree " << obj.Lat << "and " << obj.longi << " degree " << obj.Lon << endl;
	w_houses << "Capacity : " << obj.capacity << "\nSupplier ID : " << obj.SupplierID << "\n";
	for (int i = 0; i < obj.num; i++)
	{
		w_houses << "Vaccine " << i + 1 << " : ";
		w_houses << "Vaccine Name : " << obj.VacType[i].vacName << "\nQuantity : " << obj.Vac[i] << endl;
	}
	w_houses << "Total Vaccines in WareHouse : " << obj.Total << endl;
}



void FileHandling::StoreGovernmentOfficial()
{
	govtOfficial.close();
	govtOfficial.open("Government Officials.txt", ios::out);
	govtOfficial << "Percentage of vaccinated people : " << G_obj.PercentageTotalvaccinated;
	govtOfficial << "\nPercentage of partially vaccinated people : " << G_obj.PerPartiallyVaccinated;
	govtOfficial << "\nPercentage of fully vaccinated people : " << G_obj.PerFullyVaccinated;
	govtOfficial << "\nPercentage of vaccinated people with booster dose : " << G_obj.PerBoosterVaccinated;
	govtOfficial << "\nTotal amount spend till now on vaccines : " << G_obj.AmountSpentTotal;
	govtOfficial << "\nVaccines used per type : " << endl;
	for (int i = 0; i < 6; ++i)
	{
		govtOfficial << "For type " << i + 1 << " ( ";
		if (i == 0)
		{
			govtOfficial << "Pfizer-BioNTech ) : ";
		}
		else if (i == 1)
		{
			govtOfficial << "Moderna ) : ";
		}
		else if (i == 2)
		{
			govtOfficial << "PakVac ) : ";
		}
		else if (i == 3)
		{
			govtOfficial << "Sinopharm ) : ";
		}
		else if (i == 4)
		{
			govtOfficial << "CanSio Bio ) : ";
		}
		else if (i == 5)
		{
			govtOfficial << "Astrazeneca ) : ";
		}
		govtOfficial << G_obj.vacUsed_perType[i] << endl;
	}
	govtData.close();
	govtData.open("Govt Record.txt", ios::out);
	govtData << G_obj.PercentageTotalvaccinated << endl << G_obj.PerPartiallyVaccinated << endl << G_obj.PerFullyVaccinated << endl << G_obj.PerBoosterVaccinated << endl << G_obj.AmountSpentTotal << endl;
	for (int i = 0; i < 6; ++i)
	{
		govtData << G_obj.vacUsed_perType[i] << endl;
	}
}



void FileHandling::Close()
{
	CNICs.close();
	IDs.close();
	E_mails.close();
	Email_Pass.close();
	admin.close();
	s_Admin.close();
	manuFacturer.close();
	supplier.close();
	vendor.close();
	doctor.close();
	md_doctor.close();
	fDOs.close();
	citizen.close();
	vaccinesTypes.close();
	vaccinationCenteres.close();
	govtOfficial.close();
	govtPdata.close();
	govtData.close();
	w_houses.close();
	vacData.close();
}
